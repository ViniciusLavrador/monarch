// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Business Related Stuff (Not Models...)
enum Status {
    ACTIVE
    INACTIVE
    DELETED
}

// Business Models

// Properties
model PropertyType {
    id Int @id @default(autoincrement())

    name   String
    status Status @default(INACTIVE)

    properties Property[]
}

model Property {
    id Int @id @default(autoincrement())

    name   String
    status Status @default(INACTIVE)

    // Address
    street                 String
    number                 String
    zipCode                String
    city                   String
    state                  String
    country                String
    additionalAddressLine1 String?
    additionalAddressLine2 String?
    lat                    Decimal? @db.Decimal(10, 6)
    long                   Decimal? @db.Decimal(10, 6)
    placeID                String?

    // Relations
    type   PropertyType @relation(fields: [typeId], references: [id])
    typeId Int
}
